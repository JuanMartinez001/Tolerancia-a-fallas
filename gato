import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Arrays;

public class TicTacToeGUI {
    // Variables de juego
    private static String[][] tablero = new String[3][3];
    private static String jugadorActual = "X";
    private static JButton[][] botones = new JButton[3][3];
    
    private static final String archivoEstado = "estado_gato.dat";

    public static void main(String[] args) {
        // Inicializar el tablero
        inicializarTablero();
        
        // Crear la ventana (JFrame)
        JFrame ventana = new JFrame("Tic-Tac-Toe (Gato)");
        ventana.setLayout(new GridLayout(3, 3)); // Tablero 3x3
        ventana.setSize(300, 300);
        ventana.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Crear los botones y añadirlos al tablero
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                botones[i][j] = new JButton();
                botones[i][j].setFont(new Font("Arial", Font.PLAIN, 60));
                botones[i][j].setFocusPainted(false);
                botones[i][j].setText(""); // Botón vacío
                botones[i][j].setEnabled(true);

                final int fila = i, columna = j;
                botones[i][j].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        manejarMovimiento(fila, columna);
                    }
                });

                ventana.add(botones[i][j]);
            }
        }

        // Cargar el estado guardado, si existe
        cargarEstado();

        // Mostrar la ventana
        ventana.setVisible(true);
    }

    // Inicializa el tablero con espacios vacíos
    private static void inicializarTablero() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                tablero[i][j] = " ";
            }
        }
    }

    // Maneja el movimiento de los jugadores
    private static void manejarMovimiento(int fila, int columna) {
        // Si la casilla ya está ocupada, no hacemos nada
        if (!tablero[fila][columna].equals(" ")) {
            return;
        }

        // Coloca la marca del jugador actual
        tablero[fila][columna] = jugadorActual;
        botones[fila][columna].setText(jugadorActual);
        botones[fila][columna].setEnabled(false); // Desactivar el botón después de hacer clic

        // Verificar si hay un ganador
        if (verificarGanador()) {
            JOptionPane.showMessageDialog(null, "¡El jugador " + jugadorActual + " ha ganado!");
            guardarEstado();
            reiniciarJuego();
            return;
        }

        // Verificar si hay un empate
        if (tableroLlano()) {
            JOptionPane.showMessageDialog(null, "¡Es un empate!");
            guardarEstado();
            reiniciarJuego();
            return;
        }

        // Cambiar al siguiente jugador
        jugadorActual = jugadorActual.equals("X") ? "O" : "X";

        // Guardar el estado después de cada movimiento
        guardarEstado();
    }

    // Verificar si hay un ganador
    private static boolean verificarGanador() {
        // Comprobar filas, columnas y diagonales
        for (int i = 0; i < 3; i++) {
            if (tablero[i][0].equals(tablero[i][1]) && tablero[i][1].equals(tablero[i][2]) && !tablero[i][0].equals(" ")) {
                return true;
            }
            if (tablero[0][i].equals(tablero[1][i]) && tablero[1][i].equals(tablero[2][i]) && !tablero[0][i].equals(" ")) {
                return true;
            }
        }

        if (tablero[0][0].equals(tablero[1][1]) && tablero[1][1].equals(tablero[2][2]) && !tablero[0][0].equals(" ")) {
            return true;
        }
        if (tablero[0][2].equals(tablero[1][1]) && tablero[1][1].equals(tablero[2][0]) && !tablero[0][2].equals(" ")) {
            return true;
        }

        return false;
    }

    // Verificar si el tablero está lleno (empate)
    private static boolean tableroLlano() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (tablero[i][j].equals(" ")) {
                    return false;
                }
            }
        }
        return true;
    }

    // Guardar el estado del juego en un archivo
    private static void guardarEstado() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(archivoEstado))) {
            oos.writeObject(tablero);
            oos.writeObject(jugadorActual);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Cargar el estado del juego desde un archivo
    private static void cargarEstado() {
        if (new File(archivoEstado).exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(archivoEstado))) {
                tablero = (String[][]) ois.readObject();
                jugadorActual = (String) ois.readObject();
                actualizarBotones();
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        }
    }

    // Actualizar los botones con el estado cargado
    private static void actualizarBotones() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                botones[i][j].setText(tablero[i][j]);
                botones[i][j].setEnabled(tablero[i][j].equals(" "));
            }
        }
    }

    // Reiniciar el juego
    private static void reiniciarJuego() {
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Quieres jugar otra vez?", "Juego terminado", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            inicializarTablero();
            actualizarBotones();
        } else {
            System.exit(0);
        }
    }
}
